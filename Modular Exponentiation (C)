#include <stdio.h>
#include <stdlib.h>
#include <math.h>

long modularExpoentiation(long e, long m, long b){
    int ctr = 1;
    double temp;
    double modexp;
    double base = (double) b;
    double expo = 1;

    if(e == 0) return 1;
    if(e < 0) return 0;
    if(e == 1) return b % m;
    
    while(e > ctr){
        ctr *= 2;
        temp = pow(base,expo);
        modexp = (long)temp %m;
        expo *= 2;
       if(temp > m){
           base = modexp;
           expo = 2;
       }
    }
     if(e == (ctr/2))
       return modexp;
       else {
          temp = pow((double)b,(double)(e-(ctr/2)));
           temp = ((long)modexp * ((long)temp % m)) % m;

           return temp;

       }


}


int main(){

long e = 5;
long b = 1200;
long m = 2537;
printf("%d",modularExpoentiation(e,m,b));



return 0;

}

